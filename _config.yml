url: "https://lars.hupel.info"
title: "Lars Hupel’s website"
include:
  - "_redirects"
  - "_headers"
exclude:
  - "img_assets"
  - "scripts"
  - "Gemfile"
  - "Gemfile.lock"
  - "vendor"
  - ".ruby-version"
  - "venv"
  - ".github"
encoding: "utf-8"

assets:
  source_maps: false
  sources:
    - "_assets"
  digest: true

collections:
  articles:
    output: true
    permalink: /:collection/:name/
  talks:
    output: true
    permalink: /:collection/:name/

defaults:
  - scope:
      path: ""
      type: articles
    values:
      layout: article
      nav: articles
      card_theme: bg-dark text-white
      is_article: true
      description: ""
  - scope:
      path: ""
      type: talks
    values:
      layout: talk
      nav: talks
      description: ""
  - scope:
      path: "topics/crdt"
    values:
      long_title: An introduction to Conflict-Free Replicated Data Types
      layout: topics/crdt
      extra_header: topics/crdt/header.html
      permalink: /:path/:basename/
      nav: articles
      description: ""
      toc: true
      lang: en
      abstract: |
        This is a series about Conflict-Free Replicated Data Types, or CRDTs for short.
        Their purpose is to allow seamless replication of data on different nodes in a distributed system.
        Merging is by construction always possible, without any conflicts.
        This series assumes no knowledge about CRDTs, but be prepared to learn a thing or two about algebras.
        All code samples on this page are interactive and executed in your browser.
        Understanding the code is necessary for understanding the concepts, so you should be familiar with JavaScript.
        If you notice any bugs on this page, [please let me know](https://github.com/larsrh/website/issues)!
  - scope:
      path: "topics/recursion"
    values:
      long_title: What, if anything, is recursion? A primer.
      layout: topics/recursion
      extra_header: topics/recursion/header.html
      permalink: /:path/:basename/
      nav: articles
      description: ""
      toc: true
      lang: en
      abstract: |
        Tired of those clichéd “Recursion: see recursion” jokes?
        Me too.
        Because that is not actually an example of recursion!
        Hence this series, in which I set out to explain what recursion actually is.
        Prepare for a wild ride into set theory.
        But don't worry!
        All concepts are explained using interactive code snippets that can be executed in your browser.
        Understanding the code is necessary for understanding the concepts, so you should be familiar with JavaScript.
        If you notice any bugs on this page, [please let me know](https://github.com/larsrh/website/issues)!
  - scope:
      path: "topics/cycling"
    values:
      long_title: Fahrradstrecken in & um München
      layout: topics/cycling
      extra_header: topics/cycling/header.html
      permalink: /:path/:basename/
      nav: articles
      description: ""
      lang: de
